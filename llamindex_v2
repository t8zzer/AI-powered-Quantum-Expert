#pip install llama-index-vector-stores-faiss faiss-cpu
import os.path
import faiss
from llama_index.core import (
    VectorStoreIndex,
    SimpleDirectoryReader,
    StorageContext,
    Settings,
    load_index_from_storage,
)
from llama_index.vector_stores.faiss import FaissVectorStore
#from llama_index.core import Settings
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.llms.openai import OpenAI
from time import time

# check if storage already exists
PERSIST_DIR = "./storage"
if not os.path.exists(PERSIST_DIR):
    # load the documents and create the index
    documents = SimpleDirectoryReader("data").load_data()
    Settings.chunk_size = 512
    Settings.chunk_overlap = 50
    
    Settings.llm = OpenAI(model="gpt-3.5-turbo")
    Settings.embed_model = HuggingFaceEmbedding(
        model_name="BAAI/bge-small-en-v1.5", top_n=3
    )

    embedding = Settings.embed_model

    # Verwende das SentenceTransformer-Modell für Embeddings
    embedding = SentenceTransformerEmbedding(model)

    # erstelle Index mit dem gewählten Embedding-Modell
    #index = VectorStoreIndex.from_documents(documents, embedding=embedding)

    # erstelle FAISS-basierten VectorStore
    d=1536
    faiss_index = faiss.IndexFlatL2(d)  # 512 ist die Dimension des Embeddings, 1536 für gpt-3.5-embeddings
    vector_store = FaissVectorStore(faiss_index=faiss_index)
    # erstelle Index mit FAISS als Speichersystem
    index = VectorStoreIndex.from_documents(documents=documents, vector_store=vector_store)
    #index = VectorStoreIndex.from_documents(documents, )

    # store it for later
    index.storage_context.persist(persist_dir=PERSIST_DIR)
else:
    # load the existing index
    storage_context = StorageContext.from_defaults(persist_dir=PERSIST_DIR)
    index = load_index_from_storage(storage_context)

#query the index
#query_engine = index.as_query_engine()
#query_engine = index.as_query_engine(similarity_top_k=4)
#definiere Abfrageengine
query_engine = index.as_query_engine(similarity_top_k=10)

# Frage stellen
now = time()
response = query_engine.query("What is multicast?")
print(f"Elapsed: {round(time() - now, 2)}s")
print(response)
response = query_engine.query("Can you please sum up the introduction to multicast?")
print(response)